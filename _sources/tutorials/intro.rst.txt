*************************************
First steps with internationalization
*************************************

Welcome in an tutorial which introduces the basics of internationalization. It is
aimed on anyone who has never dealt with internationalization before. Examples in this
tutorial are written in JavaScript, but it explain the basic principles which are shared
across programming languages.

Basic terminology
=================

Let's start with a basic terminology -- what's internationalization.

I like the definition from world wide web consortion. This definition is very precise,
but if we simplify it it says:

   Internationalization is the design and development of a product that enables easy
   localization for target audiences.

In other words, internationalization is what we do as developers to make our app
easily localized by translators.

.. note:: I18n numeronym

   Internationalization is also very often shortened to i18n, because there's 18 letters
   between *I* an *n*.

First translations
==================

What would you do if you wanted to translate a word or phrase by yourself? You would
lookup into **dictionary** (or use an online translator). This almost identical to how
it works in software.

Imagine we have a simple app which returns a random motto of the day:

.. code-block:: js

   const motds = [
      "Action is the foundational key to all success.",
      "If you cannot do great things, do small things in a great way.",
      "Done is better than perfect."
   ]

   const motd = motds[Math.floor(Math.random() * motds.length)]
   console.log(motd)

We want to translate our mottos into another language, let's say Czech. First,
we need a dictionary where we can lookup the phrase and get a translation:

.. code-block:: js

   const en2cs = {
      "Action is the foundational key to all success.":
         "Akce je základem úpěchu.",

      "If you cannot do great things, do small things in a great way.":
         "Pokud nemůžeš dělat velké věci, dělej malé věci velkým stylem.",

      "Done is better than perfect.":
         "Hotové je lepší než dokonalé."
   }

Next we need a function, which take a message and returns a translation from our
dictionary:

.. code-block:: js

   function translate(message) {
      // if we don't have a translation, return the original message
      return en2cs[message] || message
   }

Now put all these pieces together:

.. code-block:: js

   const en2cs = {
      "Action is the foundational key to all success.":
         "Akce je základem úpěchu.",

      "If you cannot do great things, do small things in a great way.":
         "Pokud nemůžeš dělat velké věci, dělej malé věci velkým stylem.",

      "Done is better than perfect.":
         "Hotové je lepší než dokonalé."
   }

   function translate(message) {
      // if we don't have a translation, return original message
      return en2cs[message] || message
   }

   const motds = [
      translate("Action is the foundational key to all success."),
      translate("If you cannot do great things, do small things in a great way."),
      translate("Done is better than perfect.")
   ]

   const motd = motds[Math.floor(Math.random() * motds.length)]
   console.log(motd)

And voilà, we have our app localized in Czech. Altough this is not very useful,
because now the app is always in Czech, this is roughly how it works. And we're going
to learn two new terms: **message catalogs** and **message IDs**.

Message ID
----------

Our ``translate`` function takes a message as a first parameter and then look it up
in dictionary. If we swapped English-Czech dictionary ``en2cs`` to other one, let's say
English-Icelandic ``en2is``, only the translations would be different. The keys of
dictionary would be the same.

In other words, **message ID** is what we use in our code and what identifies the
message across all languages.

Message catalogs
----------------

The dictionary ``en2cs`` is also called a **message catalog**. It's simple mapping
from **message ID** to a translation in given language. In practice, message catalogs
also contain other language-specific data like date and number formats, but we'll talk
about it later.

Adding more languages
---------------------

Let's add more languages.

Since our app is originally written in English, let's enable to switch between
Czech and English. First, we need to alter the ``translate`` method to accept extra
parameter: ``language`` (also, let's rename the ``message`` argument to ``msgId`` as
a shortcut for *message ID*):

.. code-block:: js

   function translate(language, msgId) {
      let translation

      if (language === "cs") {
          translation = en2cs[msgId]
      }

      // if we don't have a translation, return the original message
      return translation || msgId
   }

Now add another variable ``lang`` to the top of the file, so we can easily switch
languages:

.. code-block:: js

   // the active language
   const lang = "en"

   const en2cs = {
      "Action is the foundational key to all success.":
         "Akce je základem úpěchu.",

      "If you cannot do great things, do small things in a great way.":
         "Pokud nemůžeš dělat velké věci, dělej malé věci velkým stylem.",

      "Done is better than perfect.":
         "Hotové je lepší než dokonalé."
   }

   function translate(language, msgId) {
      let translation

      if (language === "cs") {
          translation = en2cs[msgId]
      }

      // if we don't have a translation, return the original message
      return translation || msgId
   }

   const motds = [
      translate(lang, "Action is the foundational key to all success."),
      translate(lang, "If you cannot do great things, do small things in a great way."),
      translate(lang, "Done is better than perfect.")
   ]

   const motd = motds[Math.floor(Math.random() * motds.length)]
   console.log(motd)

Try to play around this code a bit and switch languages from "cs" to "en". It works,
right?

Adding new languages is as easy as creating a new message catalog and adding another
branch to if conditino inside ``translate`` method. We could also set the ``lang``
variable through command line or load the system settings, but that's not the point
at the moment.

TODO NEXT
=========

Plurals?
Variables?
